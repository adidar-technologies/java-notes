==============================
         JAVA NOTES
==============================

1. What is Java?
-----------------
- Java is an Object-Oriented Programming Language.
- Released in 1995 by James Gosling.
- Famous for the principle "Write Once, Run Anywhere (WORA)".

High-Level Language:
  - Abstracts hardware details
  - Easy to understand & write
  - Human readable
  - Requires compiler to convert code into machine code


2. Low-Level Language (LLL)
----------------------------
- Machine-level language.

Advantages:
  - Faster compared to HLL
  - More efficient

Disadvantages:
  - Difficult to read/write code
  - Requires detailed hardware knowledge


3. Features of Java
--------------------

a) Platform Independent
   - Once compiled, Java generates a .class file.
   - The .class file can run on any OS with JDK/JVM installed.

b) Object-Oriented
   - Everything in Java is treated as an object.

c) Secure
   - No direct memory access
   - Provides runtime checking & security features

d) Robust
   - Strong memory management
   - Exception handling
   - Type checking (rules for using correct data types)

e) Simple
   - Easier to learn
   - Syntax similar to C/C++
   - Uses English keywords for readability

f) Multithreaded
   - Task: A group of instructions for a specific functionality
   - Thread: Execution platform for a task
   - Without Multithreading: 10 tasks = 10 mins
   - With Multithreading: 10 tasks run in 1 min (parallel execution)

   Before Java 21: Threads tied to CPU cores (Dual, Quad, Octa core)
   After Java 21: Virtual Threads introduced (managed by JVM)

g) High Performance
   - Uses JIT (Just-In-Time) compiler
   - JIT identifies repeated code (hotspots) and optimizes execution

   Example:
     Loop 10 times:
       a = 10
       b = 5
       print a + b
     End Loop
   (JIT optimizes instead of repeating addition each time)

h) Portable
   - Write code on one machine and run it on any machine (Windows/Linux/Mac)
   - Requirement: JVM must be installed

i) Distributed
   - Supports networking (java.net)
   - Supports RMI (Remote Method Invocation)
   - Allows a program on one machine to call methods on another
   - Example: EJB (Enterprise Java Beans - now deprecated)


4. Example Scenario (Bank System - OOP)
----------------------------------------
- Manager:
   Can update interest rates (6% -> 10%)
   Can update gold reserves (1 ton -> 5 tons)
- Employee:
   Cannot update interest rates or gold reserves


5. Installation Steps
----------------------
1. Download JDK:
   https://www.oracle.com/java/technologies/downloads/?utm_source=chatgpt.com#jdk24-windows
   Options: ZIP archive or EXE installer

2. Setup PATH in environment variables

3. Verify installation in CMD:
   java --version
   javac
   (Should not show "unknown command")


6. Simple Hello World Program
------------------------------
public class HelloWorld {
    public static void main(String args[]) {
        System.out.println("Hello World");
    }
}

Explanation:
public class HelloWorld
- public    : Accessible from anywhere
- class     : Code is always wrapped inside a class
- HelloWorld: Class name (must match file name)

public static void main(String args[])
  public - this method is accessible from anywhere. 
  static - When we want to access a method we dont need to create object, we can access it directly using Classname. 
  void - This is return type, Void means this method returns nothing.
  main - This name of the method.
  String - Its a data type.
  args[] - its a variable of type string array. 

System.out.println
  System - This is a class, this is built in class, which is present java libraries.
  out  - it is static object, representing the standard output(Usally console).
  println - This is the method that actually prints the message.


Flow of program.
----------------------------
1. The programmer writes source code and keep it in .java file.
The code is written in high level language.

2. Compile the program
------------------------------
To compile the code we use javac filename.java
The Compiler will transulates .java file into .class file.
The code that is present inside the .class is bytecode.

3. ByteCode(.class)
--------------------
These are intermediatory instructions.
It cannot run directly on hardware. It needs the JVM.

4.JVM(Java Virtual Machine)
----------------------------
By using "java ClassName" you give bytecode to your JVM.
The JVM s responsible for executing the bytecode using the OS and System resources.

Inside JVM we have few subcomponents.
   Class Loader - Loads .class file into JVM (memory).
   ByteCode Verifier - checks for security, illegal code and memory voilations.
   Interpreter - It reads the byte code line by line and executes them.
   JitCompiler - 
     It detects the frequently executed Code and creates Hotspots
     The performance increases significantly. 

 
Class & Object - 
----------------
Class - 
   A class is a blueprint/template used to create objects.
  
   A class defines
         - Fields(variables/attributes)  - It represents the state of object
         - Methods(functions) - It represents the behaviour of objects. 

 class Car{
        
     String brand;
     String model;
     String price;
   
     public void drive(){
        System.out.println("start the engine");
	System.out.println("put a gear");
        System.out.println("start driving");        
    }
  }
   
 Object:
   An Object is instance of a class. 
   It occupies memomry and hold actual data.

Steps to create Object.
  Car car1 = new Car();

  Car - Class type.
  car1 - Reference to your object that is stored in the memory.
  new Car() - Actual object creation will be done here.
  While creating the object the variables are assigned with default values and then loaded into memory.

 Accessing class variable:
    car1.brand
    reference dot variable name
    Assigning values to your variables.
    car1.brand = "audi";
 
Accessing method
   
    car1.drive();

 reference dot functionName()




   


